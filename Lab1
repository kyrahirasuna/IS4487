{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kyrahirasuna/IS4487/blob/main/Module1_Script_v1_2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p_Yu45OYdj3Y"
      },
      "source": [
        "# Kyra Hirasuna\n",
        "# IS 4487 Module 1 Script\n",
        "\n",
        "## Agenda\n",
        "\n",
        "- Loading installed packages\n",
        "- Inspect data\n",
        "- Explore plot types \n",
        "\n",
        "Make sure you have downloaded tonight's script and data from Canvas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UE93RwXhgiJS"
      },
      "source": [
        "##Load Libraries\n",
        "\n",
        "In this class we will be using \n",
        "- Pandas\n",
        "- Scikitlearn\n",
        "- Matplotlib\n",
        "\n",
        "We can pull sample data from \n",
        "- statsmodels.api"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JYRZY5n0gfNe"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib as mpl\n",
        "import sklearn as sl\n",
        "import statsmodels.api as sm"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bREaXo8jfu-O"
      },
      "source": [
        "## Getting data into Pandas\n",
        "\n",
        "In this case we will load data from the statsmodels.org library\n",
        "\n",
        "MTCARS is a traditional dataset used for learning.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6_FwprxVgR0e",
        "outputId": "1be1d3bd-0016-4965-b648-37e5886aae12"
      },
      "source": [
        "mtcars = sm.datasets.get_rdataset(\"mtcars\", \"datasets\", cache=True).data\n",
        "df = pd.DataFrame(mtcars)\n",
        "print(df)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                      mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
            "Mazda RX4            21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
            "Mazda RX4 Wag        21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
            "Datsun 710           22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
            "Hornet 4 Drive       21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
            "Hornet Sportabout    18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
            "Valiant              18.1    6  225.0  105  2.76  3.460  20.22   1   0     3   \n",
            "Duster 360           14.3    8  360.0  245  3.21  3.570  15.84   0   0     3   \n",
            "Merc 240D            24.4    4  146.7   62  3.69  3.190  20.00   1   0     4   \n",
            "Merc 230             22.8    4  140.8   95  3.92  3.150  22.90   1   0     4   \n",
            "Merc 280             19.2    6  167.6  123  3.92  3.440  18.30   1   0     4   \n",
            "Merc 280C            17.8    6  167.6  123  3.92  3.440  18.90   1   0     4   \n",
            "Merc 450SE           16.4    8  275.8  180  3.07  4.070  17.40   0   0     3   \n",
            "Merc 450SL           17.3    8  275.8  180  3.07  3.730  17.60   0   0     3   \n",
            "Merc 450SLC          15.2    8  275.8  180  3.07  3.780  18.00   0   0     3   \n",
            "Cadillac Fleetwood   10.4    8  472.0  205  2.93  5.250  17.98   0   0     3   \n",
            "Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3   \n",
            "Chrysler Imperial    14.7    8  440.0  230  3.23  5.345  17.42   0   0     3   \n",
            "Fiat 128             32.4    4   78.7   66  4.08  2.200  19.47   1   1     4   \n",
            "Honda Civic          30.4    4   75.7   52  4.93  1.615  18.52   1   1     4   \n",
            "Toyota Corolla       33.9    4   71.1   65  4.22  1.835  19.90   1   1     4   \n",
            "Toyota Corona        21.5    4  120.1   97  3.70  2.465  20.01   1   0     3   \n",
            "Dodge Challenger     15.5    8  318.0  150  2.76  3.520  16.87   0   0     3   \n",
            "AMC Javelin          15.2    8  304.0  150  3.15  3.435  17.30   0   0     3   \n",
            "Camaro Z28           13.3    8  350.0  245  3.73  3.840  15.41   0   0     3   \n",
            "Pontiac Firebird     19.2    8  400.0  175  3.08  3.845  17.05   0   0     3   \n",
            "Fiat X1-9            27.3    4   79.0   66  4.08  1.935  18.90   1   1     4   \n",
            "Porsche 914-2        26.0    4  120.3   91  4.43  2.140  16.70   0   1     5   \n",
            "Lotus Europa         30.4    4   95.1  113  3.77  1.513  16.90   1   1     5   \n",
            "Ford Pantera L       15.8    8  351.0  264  4.22  3.170  14.50   0   1     5   \n",
            "Ferrari Dino         19.7    6  145.0  175  3.62  2.770  15.50   0   1     5   \n",
            "Maserati Bora        15.0    8  301.0  335  3.54  3.570  14.60   0   1     5   \n",
            "Volvo 142E           21.4    4  121.0  109  4.11  2.780  18.60   1   1     4   \n",
            "\n",
            "                     carb  \n",
            "Mazda RX4               4  \n",
            "Mazda RX4 Wag           4  \n",
            "Datsun 710              1  \n",
            "Hornet 4 Drive          1  \n",
            "Hornet Sportabout       2  \n",
            "Valiant                 1  \n",
            "Duster 360              4  \n",
            "Merc 240D               2  \n",
            "Merc 230                2  \n",
            "Merc 280                4  \n",
            "Merc 280C               4  \n",
            "Merc 450SE              3  \n",
            "Merc 450SL              3  \n",
            "Merc 450SLC             3  \n",
            "Cadillac Fleetwood      4  \n",
            "Lincoln Continental     4  \n",
            "Chrysler Imperial       4  \n",
            "Fiat 128                1  \n",
            "Honda Civic             2  \n",
            "Toyota Corolla          1  \n",
            "Toyota Corona           1  \n",
            "Dodge Challenger        2  \n",
            "AMC Javelin             2  \n",
            "Camaro Z28              4  \n",
            "Pontiac Firebird        2  \n",
            "Fiat X1-9               1  \n",
            "Porsche 914-2           2  \n",
            "Lotus Europa            2  \n",
            "Ford Pantera L          4  \n",
            "Ferrari Dino            6  \n",
            "Maserati Bora           8  \n",
            "Volvo 142E              2  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UlxcLPS-m0NO"
      },
      "source": [
        "## Preview Data\n",
        "\n",
        "Use the following data dictionary to understand the attributes available\n",
        "\n",
        "|Attribute | Description |\n",
        "|---------|--------------|\n",
        "|\tmpg\t|Miles/(US) gallon|\n",
        "|\tcyl|\tNumber of cylinders|\n",
        "|\tdisp|\tDisplacement (cu.in.)|\n",
        "|hp|\tGross horsepower|\n",
        "|drat|\tRear axle ratio|\n",
        "|wt|\tWeight (1000 lbs)|\n",
        "|qsec|\t1/4 mile time|\n",
        "|vs|\tEngine (0 = V-shaped, 1 = straight)|\n",
        "|am|\tTransmission (0 = automatic, 1 = manual)|\n",
        "|gear|\tNumber of forward gears|"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gSvao0dlhlNn",
        "outputId": "642fb318-c0d2-42af-ec72-91a01cc516f5"
      },
      "source": [
        "#look at the top rows\n",
        "#df.tail(2) \n",
        "df.head(5)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
              "Mazda RX4          21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
              "Mazda RX4 Wag      21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
              "Datsun 710         22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
              "Hornet 4 Drive     21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
              "Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
              "\n",
              "                   carb  \n",
              "Mazda RX4             4  \n",
              "Mazda RX4 Wag         4  \n",
              "Datsun 710            1  \n",
              "Hornet 4 Drive        1  \n",
              "Hornet Sportabout     2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49f5d531-5034-4fc2-b988-3bd632d6f301\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Mazda RX4</th>\n",
              "      <td>21.0</td>\n",
              "      <td>6</td>\n",
              "      <td>160.0</td>\n",
              "      <td>110</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2.620</td>\n",
              "      <td>16.46</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mazda RX4 Wag</th>\n",
              "      <td>21.0</td>\n",
              "      <td>6</td>\n",
              "      <td>160.0</td>\n",
              "      <td>110</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2.875</td>\n",
              "      <td>17.02</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Datsun 710</th>\n",
              "      <td>22.8</td>\n",
              "      <td>4</td>\n",
              "      <td>108.0</td>\n",
              "      <td>93</td>\n",
              "      <td>3.85</td>\n",
              "      <td>2.320</td>\n",
              "      <td>18.61</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hornet 4 Drive</th>\n",
              "      <td>21.4</td>\n",
              "      <td>6</td>\n",
              "      <td>258.0</td>\n",
              "      <td>110</td>\n",
              "      <td>3.08</td>\n",
              "      <td>3.215</td>\n",
              "      <td>19.44</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hornet Sportabout</th>\n",
              "      <td>18.7</td>\n",
              "      <td>8</td>\n",
              "      <td>360.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.15</td>\n",
              "      <td>3.440</td>\n",
              "      <td>17.02</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49f5d531-5034-4fc2-b988-3bd632d6f301')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-49f5d531-5034-4fc2-b988-3bd632d6f301 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-49f5d531-5034-4fc2-b988-3bd632d6f301');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Mk01Ip_Ehk5c",
        "outputId": "2f179c6d-6408-43bb-ab6e-c445a2b69a5f"
      },
      "source": [
        "#look at last rows\n",
        "df.tail(8) "
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
              "Pontiac Firebird  19.2    8  400.0  175  3.08  3.845  17.05   0   0     3   \n",
              "Fiat X1-9         27.3    4   79.0   66  4.08  1.935  18.90   1   1     4   \n",
              "Porsche 914-2     26.0    4  120.3   91  4.43  2.140  16.70   0   1     5   \n",
              "Lotus Europa      30.4    4   95.1  113  3.77  1.513  16.90   1   1     5   \n",
              "Ford Pantera L    15.8    8  351.0  264  4.22  3.170  14.50   0   1     5   \n",
              "Ferrari Dino      19.7    6  145.0  175  3.62  2.770  15.50   0   1     5   \n",
              "Maserati Bora     15.0    8  301.0  335  3.54  3.570  14.60   0   1     5   \n",
              "Volvo 142E        21.4    4  121.0  109  4.11  2.780  18.60   1   1     4   \n",
              "\n",
              "                  carb  \n",
              "Pontiac Firebird     2  \n",
              "Fiat X1-9            1  \n",
              "Porsche 914-2        2  \n",
              "Lotus Europa         2  \n",
              "Ford Pantera L       4  \n",
              "Ferrari Dino         6  \n",
              "Maserati Bora        8  \n",
              "Volvo 142E           2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea9b38a9-1079-4601-a7cf-aa17afa141b6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Pontiac Firebird</th>\n",
              "      <td>19.2</td>\n",
              "      <td>8</td>\n",
              "      <td>400.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.08</td>\n",
              "      <td>3.845</td>\n",
              "      <td>17.05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fiat X1-9</th>\n",
              "      <td>27.3</td>\n",
              "      <td>4</td>\n",
              "      <td>79.0</td>\n",
              "      <td>66</td>\n",
              "      <td>4.08</td>\n",
              "      <td>1.935</td>\n",
              "      <td>18.90</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Porsche 914-2</th>\n",
              "      <td>26.0</td>\n",
              "      <td>4</td>\n",
              "      <td>120.3</td>\n",
              "      <td>91</td>\n",
              "      <td>4.43</td>\n",
              "      <td>2.140</td>\n",
              "      <td>16.70</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lotus Europa</th>\n",
              "      <td>30.4</td>\n",
              "      <td>4</td>\n",
              "      <td>95.1</td>\n",
              "      <td>113</td>\n",
              "      <td>3.77</td>\n",
              "      <td>1.513</td>\n",
              "      <td>16.90</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ford Pantera L</th>\n",
              "      <td>15.8</td>\n",
              "      <td>8</td>\n",
              "      <td>351.0</td>\n",
              "      <td>264</td>\n",
              "      <td>4.22</td>\n",
              "      <td>3.170</td>\n",
              "      <td>14.50</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ferrari Dino</th>\n",
              "      <td>19.7</td>\n",
              "      <td>6</td>\n",
              "      <td>145.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.62</td>\n",
              "      <td>2.770</td>\n",
              "      <td>15.50</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Maserati Bora</th>\n",
              "      <td>15.0</td>\n",
              "      <td>8</td>\n",
              "      <td>301.0</td>\n",
              "      <td>335</td>\n",
              "      <td>3.54</td>\n",
              "      <td>3.570</td>\n",
              "      <td>14.60</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Volvo 142E</th>\n",
              "      <td>21.4</td>\n",
              "      <td>4</td>\n",
              "      <td>121.0</td>\n",
              "      <td>109</td>\n",
              "      <td>4.11</td>\n",
              "      <td>2.780</td>\n",
              "      <td>18.60</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea9b38a9-1079-4601-a7cf-aa17afa141b6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ea9b38a9-1079-4601-a7cf-aa17afa141b6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ea9b38a9-1079-4601-a7cf-aa17afa141b6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "7Hxb10xChiAf",
        "outputId": "baf063f0-eb55-49e6-9c91-e65493b65422"
      },
      "source": [
        "#get a summary of the dataset\n",
        "df.describe()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             mpg        cyl        disp          hp       drat         wt  \\\n",
              "count  32.000000  32.000000   32.000000   32.000000  32.000000  32.000000   \n",
              "mean   20.090625   6.187500  230.721875  146.687500   3.596563   3.217250   \n",
              "std     6.026948   1.785922  123.938694   68.562868   0.534679   0.978457   \n",
              "min    10.400000   4.000000   71.100000   52.000000   2.760000   1.513000   \n",
              "25%    15.425000   4.000000  120.825000   96.500000   3.080000   2.581250   \n",
              "50%    19.200000   6.000000  196.300000  123.000000   3.695000   3.325000   \n",
              "75%    22.800000   8.000000  326.000000  180.000000   3.920000   3.610000   \n",
              "max    33.900000   8.000000  472.000000  335.000000   4.930000   5.424000   \n",
              "\n",
              "            qsec         vs         am       gear     carb  \n",
              "count  32.000000  32.000000  32.000000  32.000000  32.0000  \n",
              "mean   17.848750   0.437500   0.406250   3.687500   2.8125  \n",
              "std     1.786943   0.504016   0.498991   0.737804   1.6152  \n",
              "min    14.500000   0.000000   0.000000   3.000000   1.0000  \n",
              "25%    16.892500   0.000000   0.000000   3.000000   2.0000  \n",
              "50%    17.710000   0.000000   0.000000   4.000000   2.0000  \n",
              "75%    18.900000   1.000000   1.000000   4.000000   4.0000  \n",
              "max    22.900000   1.000000   1.000000   5.000000   8.0000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-833591c6-752b-4649-b97c-e628ce26f04d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>20.090625</td>\n",
              "      <td>6.187500</td>\n",
              "      <td>230.721875</td>\n",
              "      <td>146.687500</td>\n",
              "      <td>3.596563</td>\n",
              "      <td>3.217250</td>\n",
              "      <td>17.848750</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>0.406250</td>\n",
              "      <td>3.687500</td>\n",
              "      <td>2.8125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.026948</td>\n",
              "      <td>1.785922</td>\n",
              "      <td>123.938694</td>\n",
              "      <td>68.562868</td>\n",
              "      <td>0.534679</td>\n",
              "      <td>0.978457</td>\n",
              "      <td>1.786943</td>\n",
              "      <td>0.504016</td>\n",
              "      <td>0.498991</td>\n",
              "      <td>0.737804</td>\n",
              "      <td>1.6152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>10.400000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>71.100000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>2.760000</td>\n",
              "      <td>1.513000</td>\n",
              "      <td>14.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>15.425000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>120.825000</td>\n",
              "      <td>96.500000</td>\n",
              "      <td>3.080000</td>\n",
              "      <td>2.581250</td>\n",
              "      <td>16.892500</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>19.200000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>196.300000</td>\n",
              "      <td>123.000000</td>\n",
              "      <td>3.695000</td>\n",
              "      <td>3.325000</td>\n",
              "      <td>17.710000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>22.800000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>326.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>3.920000</td>\n",
              "      <td>3.610000</td>\n",
              "      <td>18.900000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>33.900000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>472.000000</td>\n",
              "      <td>335.000000</td>\n",
              "      <td>4.930000</td>\n",
              "      <td>5.424000</td>\n",
              "      <td>22.900000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>8.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-833591c6-752b-4649-b97c-e628ce26f04d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-833591c6-752b-4649-b97c-e628ce26f04d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-833591c6-752b-4649-b97c-e628ce26f04d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SoJLJMlceORN"
      },
      "source": [
        " \n",
        "# Create basic charts\n",
        "\n",
        "- Line chart\n",
        "- Bar chart\n",
        "- Histogram\n",
        "- Box plot\n",
        "- Scatter plot\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "hDUTvlJXdMaf",
        "outputId": "1ec1eeab-6eeb-47bb-859b-4f7c34e4ad73"
      },
      "source": [
        "#Line chart\n",
        "df['mpg'].plot.line(color='purple')"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb812c69190>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "ZqEk5ue2kTHA",
        "outputId": "e06faa51-80ef-4f4c-a9af-b0d0f891369c"
      },
      "source": [
        "#Line chart\n",
        "df['mpg'].plot.barh(color='blue', xticks=[0,10,20,30,40], title='Blue Bar Graph')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb811baf8e0>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4i3cnmhkSwr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "33fc220f-3eca-4beb-cf8e-1195f66ff7db"
      },
      "source": [
        "#Histogram\n",
        "df['mpg'].plot.hist(bins=10,title='Miles Per Gallon',color=\"pink\")"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb811c84df0>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "HxD2cW6QeQE0",
        "outputId": "b419e6c9-b542-4440-ce82-489310a52e13"
      },
      "source": [
        "#Boxplot\n",
        "df['mpg'].plot.box(color ='green', ylabel = 'test', title = 'This is My Chart')\n"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb811d13ee0>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "eVOSIP8SeYg3",
        "outputId": "bb9d5ef6-cf63-40ba-d162-d74e198155a6"
      },
      "source": [
        "#Scatter plot\n",
        "df.plot.scatter(x='mpg',y='hp',c='wt', marker=\"*\", title= 'This is Another Chart')"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb811da3d60>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "this is a test"
      ],
      "metadata": {
        "id": "8LidtyLNETEu"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
